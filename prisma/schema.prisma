// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id             String         @id @default(uuid())
  name           String
  address        String
  slug           String         @unique
  phone          String
  email          String
  website        String
  avatarImage    String
  coverImage     String
  description    String
  latitude       Float
  longitude      Float
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  menuCategories menuCategory[]
  Product        Product[]
  Order          Order[]
}

model menuCategory {
  id           String     @id @default(uuid())
  name         String
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  products     Product[]
}

model Product {
  id             String         @id @default(uuid())
  name           String
  price          Float
  description    String
  imageUrl       String
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  ingredients    String[]
  restaurantId   String
  restaurant     Restaurant     @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  menuCategoryId String
  menuCategory   menuCategory   @relation(fields: [menuCategoryId], references: [id], onDelete: Cascade)
  orderProducts  orderProduct[]
}

model orderProduct {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id                Int               @id @default(autoincrement())
  total             Float
  status            OrderStatus
  consumptionMethod consumptionMethod
  restaurant        Restaurant        @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId      String
  orderProducts     orderProduct[]
  customerName      String
  customerCpf       String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

enum OrderStatus {
  PENDING
  IN_PREPARATION
  PAYMENT_CONFIRMED
  PAYMENT_FAILED
  FINISHED
}

enum consumptionMethod {
  DINE_IN
  TAKEAWAY
}
